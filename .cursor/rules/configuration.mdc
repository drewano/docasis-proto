---
description:
globs:
alwaysApply: false
---
# Configuration Management

- **Configuration Principles**
  - Use Python modules for configuration
  - Keep sensitive information in environment variables
  - Support multiple environments (development, testing, production)

## Configuration Structure

Configuration files should be organized as Python modules:

```python
# ✅ DO: Structure configuration as a module
# config/default.py

"""
Default configuration for the RAG Intelligent Agent.
"""

import os
from pathlib import Path

# Base paths
BASE_DIR = Path(__file__).parent.parent
DATA_DIR = BASE_DIR / "data"
MODELS_DIR = BASE_DIR / "models"

# API keys (loaded from environment variables)
google_api_key = os.getenv("GOOGLE_API_KEY")
qdrant_api_key = os.getenv("QDRANT_API_KEY")

# Vector database settings
qdrant_url = os.getenv("QDRANT_URL", "https://your-qdrant-instance.cloud")
qdrant_collection = os.getenv("QDRANT_COLLECTION", "documents")

# Model settings
embedding_model = "text-embedding-3-small"
llm_provider = "google"
llm_model = "gemini-pro"
```

## Loading Configuration

Always use the standard configuration loader:

```python
# ✅ DO: Use the standard config loader
from src.utils.config import load_config

# Load the default config
config = load_config()

# Or load a specific config
config = load_config("config/production.py")
```

## Environment Variables

For sensitive information, use environment variables:

```python
# ✅ DO: Load secrets from environment variables
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Access environment variables
api_key = os.getenv("API_KEY")
if not api_key:
    raise ValueError("API_KEY environment variable is required")
```

## Configuration Access Pattern

Use a consistent pattern for accessing configuration:

```python
# ✅ DO: Access configuration properties directly
def get_embeddings(text):
    """Get embeddings for text using the configured model."""
    from src.utils.config import load_config
    config = load_config()
    
    # Use configuration properties
    model_name = config.embedding_model
    api_key = config.google_api_key
    
    # Implementation...
```

## Custom Configuration

Extend the base configuration for specific environments:

```python
# ✅ DO: Extend the base configuration
# config/development.py

"""
Development environment configuration.
Extends the default configuration.
"""

# Import the default configuration
from config.default import *

# Override specific settings
qdrant_url = "http://localhost:6333"
debug = True
log_level = "DEBUG"
```
